{"model_display_data": {"Adapter": {"Swift": {"file_uri": "./generated_code/qwer/Generalization/5b5f80291d41c8103b93ac5b/Swift//Adapter.swift", "attribute_list": [], "func_info_list": [{"body": "func callServer(_ operation: String, _ body: Dictionary<String, Any>, _ successCB:@escaping (_ result: Any)-> Void,_ errorCB: @escaping (_ result: Any) -> Void) {\n    Alamofire.request(url + operation, method: .post, parameters: body, headers: headers)\n        .responseJSON { dataResponse in\n            switch dataResponse.result {\n            case .success:\n                successCB(dataResponse.result)\n                successCB(dataResponse.response as Any)\n                successCB(dataResponse.value as Any)\n            case .failure:\n                errorCB(dataResponse.error as Any)\n            }\n    }\n}\n\nfunc createOne(tableName collection: String, data:JSON, successCB: @escaping (_ result: Any)-> Void, errorCB: @escaping (_ result: Any) -> Void ) {\n    if data != JSON.null && !collection.isEmpty && !isArray(data: data) {\n        let body = [\"collection\": collection, \"data\": String(describing:data)]\n        callServer(\"/create\", body, successCB, errorCB)\n    } else {\n        errorCB(\"Error:\" + \"Invalid Parameter\")\n    }\n}\n\n// TODO test\nfunc createMany(tableName collection: String, data:JSON, successCB: @escaping (_ result: Any)-> Void, errorCB: @escaping (_ result: Any) -> Void ) {\n    if data != JSON.null && !collection.isEmpty && isArray(data: data) {\n        let body = [\"collection\": collection, \"data\": String(describing:data)]\n        callServer(\"/create\", body, successCB, errorCB)\n    } else {\n        errorCB(\"Error:\" + \"Invalid Parameter\")\n    }\n}\n\nfunc readOne(tableName collection: String, data:JSON, successCB: @escaping (_ result: Any)-> Void, errorCB: @escaping (_ result: Any) -> Void ) {\n    if data != JSON.null && !collection.isEmpty {\n        if data[\"._id\"] != JSON.null {\n            let body = [\"collection\": collection, \"_id\": String(describing:data[\"._id\"])]\n            callServer(\"/readOne\", body, successCB, errorCB)\n        } else {\n            let body = [\"collection\": collection, \"data\": String(describing:data)]\n            callServer(\"/readOne\", body, successCB, errorCB)\n        }\n    } else {\n        errorCB(\"Error:\" + \"Invalid Parameter\")\n    }\n}\n\nfunc readMany(tableName collection: String, data:JSON, successCB: @escaping (_ result: Any)-> Void, errorCB: @escaping (_ result: Any) -> Void ) {\n    if data != JSON.null && !collection.isEmpty {\n        let body = [\"collection\": collection, \"data\": String(describing:data)]\n        callServer(\"/readOne\", body, successCB, errorCB)\n    } else {\n        errorCB(\"Error:\" + \"Invalid Parameter\")\n    }\n}\n\nfunc update(tableName collection: String, data:JSON, successCB: @escaping (_ result: Any)-> Void, errorCB: @escaping (_ result: Any) -> Void ) {\n    if data != JSON.null && !collection.isEmpty && data[\"newData\"] != JSON.null && !isArray(data: data[\"newData\"])  {\n        if data[\"._id\"] != JSON.null {\n            let body = [\"collection\": collection, \"_id\": String(describing:data[\"._id\"]), \"newData\": String(describing:data[\"newData\"])]\n            callServer(\"update\", body, successCB, errorCB)\n        } else if data[\"oldData\"] != JSON.null && isArray(data: data[\"oldData\"]){\n            let body = [\"collection\": collection, \"oldData\": String(describing: data[\"oldData\"]), \"newData\": String(describing: data[\"newData\"])]\n            callServer(\"/update\", body, successCB, errorCB)\n        }\n    } else {\n        errorCB(\"Error:\" + \"invalid parameters\")\n    }\n}\n\nfunc delete(tableName collection: String, data:JSON, successCB: @escaping (_ result: Any)-> Void, errorCB: @escaping (_ result: Any) -> Void ) {\n    if data != JSON.null && !collection.isEmpty {\n        if data[\"._id\"] != JSON.null {\n            let body = [\"collection\": collection, \"_id\": String(describing:data[\"._id\"])]\n            callServer(\"/delete\", body, successCB, errorCB)\n        } else {\n            let body = [\"collection\": collection, \"data\": String(describing:data)]\n            callServer(\"/delete\", body, successCB, errorCB)\n        }\n    } else {\n         errorCB(\"Error:\" + \"invalid parameters\")\n    }\n}", "name": "Adapter", "examples": [], "annotation": ""}]}, "JavaScript": {"file_uri": "./generated_code/qwer/Generalization/5b5f80291d41c8103b93ac5b/JavaScript//Adapter.js", "attribute_list": [], "func_info_list": [{"body": "// CRUD: createOne.\n// \"collection\" must be specified by the first parameter.\n// \"data\" must be specified as an object passed in by the second parameter.\n// Example,\n// collection : \"table1\",\n// data : {\"entity1\" : 1}\nDBAdapter.createOne = function(collection, data, successCB, errorCB) {\n    if (is_defined(collection) && is_defined(data) && !is_array(data)) {\n        var body = {\n            collection : collection,\n            data : JSON.stringify(data)\n        };\n        ajaxCall(\"create\", body, successCB, errorCB);\n    } else {\n        // Error handling\n        errorCB(\"Error: \" + \"Invalid Parameters\");\n    }\n};\n\n// CRUD: createMany.\n// \"collection\" must be specified in by the first parameter.\n// \"data\" must be specified as an Array by the second parameter.\n// Example,\n// collection : \"table1\",\n// data : [{\"entity1\" : 1}, {\"entity2\" : 2}]\nDBAdapter.createMany = function(collection, data, successCB, errorCB) {\n    if (is_defined(collection) && is_defined(data) && is_array(data)) {\n        var body = {\n            collection : collection,\n            data : JSON.stringify(data)\n        };\n        ajaxCall(\"create\", body, successCB, errorCB);\n    } else {\n        // Error handling\n        errorCB(\"Error: \" + \"Invalid Parameters\");\n    }\n};\n\n// CRUD: ReadOne.\n// \"collection\" must be specified in by the first parameter.\n// \"data\" must be specified as an object by the second parameter.\n// Example,\n// collection : \"table1\",\n// data : {\"_id\", \"57d26068f2a81b5d740f695c\"} or\n// data : {\"x\" : 1234}\nDBAdapter.readOne = function(collection, data, successCB, errorCB) {\n    if (is_defined(collection) && is_defined(data)) {\n        var body;\n        if (is_defined(data._id)) {\n            body = {\n                collection : collection,\n                _id : data._id\n            };\n        } else {\n            body = {\n                collection : collection,\n                data : JSON.stringify(data)\n            };\n        }\n        ajaxCall(\"readOne\", body, successCB, errorCB);\n    } else {\n        // Error handling\n        errorCB(\"Error: \" + \"Invalid Parameters\");\n    }\n};\n\n// CRUD: readMany.\n// \"collection\" must be specified in by the first parameter.\n// \"data\" must be specified as an object by the second parameter.\n// Example,\n// collection : \"table1\",\n// data : {\"x\" : 1234}\nDBAdapter.readMany = function(collection, body, successCB, errorCB) {\n    if (is_defined(collection) && is_defined(data)) {\n        var body = {\n            collection : collection,\n            data : JSON.stringify(data)\n        };\n        ajaxCall(\"readAll\", body, successCB, errorCB);\n    } else {\n        // Error handling\n        errorCB(\"Error: \" + \"Invalid Parameters\");\n    }\n};\n\n// CRUD: update.\n// \"collection\" must be specified in by the first parameter.\n// \"data\" must be specified as an object by the second parameter.\n// Example,\n// collection : \"table1\",\n// data : {_id : \"57d25c9cf2a81b5d740f6956\", newData : {x:5678, y:2222}} or\n// data : {oldData: {y:2222}, newData : {z:5678, y:2222}}\nDBAdapter.update = function(collection, data, successCB, errorCB) {\n    if (is_defined(collection) && is_defined(data)) {\n        var body;\n        if (is_defined(data._id) && is_defined(data.newData) && !is_array(data.newData)) {\n            body = {\n                collection : collection,\n                _id : data._id,\n                newData: JSON.stringify(data.newData)\n            };\n        } else if (is_defined(data.oldData) && is_defined(data.newData) &&\n            !is_array(data.oldData) && !is_array(data.newData)) {\n            body = {\n                collection : collection,\n                oldData : JSON.stringify(data.oldData),\n                newData: JSON.stringify(data.newData)\n            };\n        } else {\n            errorCB(\"Error: \" + \"Invalid Parameters\");\n            return;\n        }\n        ajaxCall(\"update\", body, successCB, errorCB);\n    } else {\n        // Error handling\n        errorCB(\"Error: \" + \"Invalid Parameters\");\n    }\n};\n\n// CRUD: delete.\n// \"collection\" must be specified in by the first parameter.\n// \"data\" must be specified as an object by the second parameter.\n// Example,\n// collection : \"table1\",\n// data : {\"x\" : [{\"x\":1111}, {\"y\":3333}]} or\n// data : {\"y\" : 2222} or\n// data : {\"_id\" : \"57d26068f2a81b5d740f695c\"}\nDBAdapter.delete = function(collection, data, successCB, errorCB) {\n    if (is_defined(collection) && is_defined(data)) {\n        var body;\n        if (is_defined(data._id)) {\n            body = {\n                collection : collection,\n                _id : data._id\n            };\n        } else {\n            body = {\n                collection : collection,\n                data : JSON.stringify(data)\n            };\n        }\n        ajaxCall(\"delete\", body, successCB, errorCB);\n    } else {\n        // Error handling\n        errorCB(\"Error: \" + \"Invalid Parameters\");\n    }\n};\n\nfunction ajaxCall(operation, body, successCB, errorCB) {\n    $.ajax({\n        \"url\": url + operation,\n        \"method\": \"POST\",\n        \"content-Type\": \"application/json; charset=utf-8\",\n        \"data\": body,\n        \"success\": function(result){\n            successCB(result);\n        },\n        \"error\":  function(xhr, ajaxOptions, thrownError) {\n            errorCB(\"Error: \" + thrownError);\n        }\n    });\n}", "name": "Adapter", "examples": [], "annotation": ""}]}, "Java": {"file_uri": "./generated_code/qwer/Generalization/5b5f80291d41c8103b93ac5b/Java//Adapter.java", "attribute_list": [], "func_info_list": [{"body": "private static List<NameValuePair> basicDataArgs(JsonObject data) {\n    if(data == null)\n        throw new NullPointerException(\"data cannot be Null\");\n    String dataStr = data.toString();\n    List<NameValuePair> dataArgs = new ArrayList<NameValuePair>();\n    if(data.has(\"_id\")) {\n        dataArgs.add(new BasicNameValuePair(\"_id\", data.get(\"_id\").getAsString()));\n    }\n    else {\n        dataArgs.add(new BasicNameValuePair(\"data\", dataStr));\n    }\n    return dataArgs;\n}\n\nprivate static List<NameValuePair> basicDataArgs(JsonArray data) {\n    if(data == null)\n        throw new NullPointerException();\n    String dataStr = data.toString();\n    List<NameValuePair> dataArgs = new ArrayList<NameValuePair>();\n    dataArgs.add(new BasicNameValuePair(\"data\", dataStr));\n    return dataArgs;\n}\n\npublic static void readOne(String collection, JsonObject data, Object CBModel) {\n    List<NameValuePair> dataArgs = basicDataArgs(data);\n    callServer(collection, \"readOne\", dataArgs, CBModel);\n}\n\npublic static void readMany(String collection, JsonObject data, Object CBModel) {\n    List<NameValuePair> dataArgs = basicDataArgs(data);\n    callServer(collection, \"readAll\", dataArgs, CBModel);\n}\n\npublic static void createOne(String collection, JsonObject data, Object CBModel){\n    List<NameValuePair> dataArgs = basicDataArgs(data);\n    callServer(collection, \"create\", dataArgs, CBModel);\n}\n\npublic static void createMany(String collection, JsonArray data, Object CBModel){\n    List<NameValuePair> dataArgs = basicDataArgs(data);\n    callServer(collection, \"create\", dataArgs, CBModel);\n}\n\npublic static void update(String collection, JsonObject data, Object CBModel){\n    if (!data.has(\"newData\")) {\n        throw new IllegalArgumentException(\"lack key 'newData' in data\");\n    }\n    List<NameValuePair> params = new ArrayList<NameValuePair>();\n    if(data.has(\"_id\")) {\n        params.add(new BasicNameValuePair(\"_id\", data.get(\"_id\").getAsString()));\n    }\n    else if(data.has(\"oldData\")){\n        params.add(new BasicNameValuePair(\"oldData\", data.get(\"oldData\").toString()));\n    }\n    else {\n        throw new IllegalArgumentException(\"lack key '_id' or 'oldData' in data\");\n    }\n    params.add(new BasicNameValuePair(\"newData\", data.get(\"newData\").toString()));\n    callServer(collection, \"update\", params, CBModel);\n}\n\npublic static void delete(String collection, JsonObject data, Object CBModel){\n    List<NameValuePair> dataArgs = basicDataArgs(data);\n    callServer(collection, \"delete\", dataArgs, CBModel);\n}\n\npublic static void callServer(String collection, String operation, List<NameValuePair> params, Object CBModel){\n    String url = serverUrl + operation;\n    params.add(new BasicNameValuePair(\"collection\", collection));\n    PostCall(url, params, CBModel);\n}\n\npublic static void PostCall(String url, List<NameValuePair> params, Object CBModel){\n    Method successM, errorM;\n    try {\n        successM = CBModel.getClass().getMethod(\"successCB\", String.class);\n        errorM = CBModel.getClass().getMethod(\"errorCB\", String.class);\n    } catch (NoSuchMethodException e) {\n        e.printStackTrace();\n        return;\n    }\n\n    HttpPost post = new HttpPost(url);\n    post.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\");\n\n    if (params != null) {\n        try {\n            post.setEntity(new UrlEncodedFormEntity(params,\"utf-8\"));\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    httpAsyncClient.execute(post, new FutureCallback<HttpResponse>() {\n        @Override\n        public void completed(HttpResponse result) {\n            try {\n                String s = new BufferedReader(new InputStreamReader(result.getEntity().getContent()))\n                        .lines().collect(Collectors.joining(System.lineSeparator()));\n                successM.invoke(CBModel, s);\n            } catch (IllegalAccessException | InvocationTargetException | IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void failed(Exception ex) {\n            try {\n                errorM.invoke(CBModel, ex.getMessage());\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void cancelled() {\n            try {\n                errorM.invoke(CBModel, \"cancelled\");\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                e.printStackTrace();\n            }\n        }\n    });\n\n}", "name": "Adapter", "examples": [], "annotation": ""}]}}, "class2": {"Swift": {"file_uri": "./generated_code/qwer/Generalization/5b5f80291d41c8103b93ac5b/Swift//class2.swift", "attribute_list": [], "func_info_list": [{"body": "func createOne(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.createOne(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "createOne", "examples": ["class2.createOne({'class2Attribute2': 'some value (string)'})"], "annotation": ""}, {"body": "func createMany(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.createMany(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "createMany", "examples": ["class2.createMany([{'class2Attribute2': 'some value (string)'}, {'class2Attribute2': 'some other value (string)'}])"], "annotation": ""}, {"body": "func readOne(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.readOne(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "readOne", "examples": ["class2.readOne({'_id': 'specific id (String)'})", "class2.readOne({'class2Attribute2': 'some value (string)'})"], "annotation": ""}, {"body": "func readMany(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.readMany(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "readMany", "examples": ["class2.readMany({'class2Attribute2': 'some value (string)'})"], "annotation": ""}, {"body": "func update(search: JSON, update: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        let data = [\"oldData\": search, \"newData\": update]\n        adapter.update(tableName: collection, data: update, successCB: successCB, errorCB: errorCB)\n}", "name": "update", "examples": ["class2.update({'_id': 'specific id (String)'}(search data), {'class2Attribute2': 'some value (string)'}(update data))", "class2.update({'class2Attribute2': 'some value (string)'}(search data), {'class2Attribute2': 'some other value (string)'}(update data))"], "annotation": ""}, {"body": "func delete(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.delete(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "delete", "examples": ["class2.delete({'_id': 'specific id (String)'})", "class2.delete({'class2Attribute2': 'some value (string)'})"], "annotation": ""}]}, "JavaScript": {"file_uri": "./generated_code/qwer/Generalization/5b5f80291d41c8103b93ac5b/JavaScript//class2.js", "attribute_list": [], "func_info_list": [{"body": "class2.createOne = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.createOne(class2.name, data, successCB, errorCB);\n};", "name": "createOne", "examples": ["class2.createOne({'class2Attribute2': 'some value (string)'}, success(function), error(function))"], "annotation": " just test\nlalala\n"}, {"body": "class2.createMany = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.createMany(class2.name, data, successCB, errorCB);\n};", "name": "createMany", "examples": ["class2.createMany([{'class2Attribute2': 'some value (string)'}, {'class2Attribute2': 'some other value (string)'}], success(function), error(function))"], "annotation": ""}, {"body": "class2.readOne = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.readOne(class2.name, data, successCB, errorCB);\n};", "name": "readOne", "examples": ["class2.readOne({'_id': 'specific id (String)'}, success(function), error(function))", "class2.readOne({'class2Attribute2': 'some value (string)'}, success(function), error(function))"], "annotation": ""}, {"body": "class2.readMany = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.readMany(class2.name, data, successCB, errorCB);\n};", "name": "readMany", "examples": ["class2.readMany({'class2Attribute2': 'some value (string)'}, success(function), error(function))"], "annotation": ""}, {"body": "class2.update = function(search, update, success, error) {\n    // Wrap data\n    var data = {\n        oldData : search,\n        newData : update\n    };\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.update(class2.name, data, successCB, errorCB);\n};", "name": "update", "examples": ["class2.update({'_id': 'specific id (String)'}(search data), {'class2Attribute2': 'some value (string)'}(update data), success(function), error(function))", "class2.update({'class2Attribute2': 'some value (string)'}(search data), {'class2Attribute2': 'some other value (string)'}(update data), success(function), error(function))"], "annotation": ""}, {"body": "class2.delete = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.delete(class2.name, data, successCB, errorCB);\n};", "name": "delete", "examples": ["class2.delete({'_id': 'specific id (String)'}, success(function), error(function))", "class2.delete({'class2Attribute2': 'some value (string)'}, success(function), error(function))"], "annotation": ""}]}, "Java": {"file_uri": "./generated_code/qwer/Generalization/5b5f80291d41c8103b93ac5b/Java//class2.java", "attribute_list": [], "func_info_list": [{"body": "public static void createOne(JsonObject data) {\n    class createOneCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    createOneCB CBModel = new createOneCB();\n    Adapter.createOne(className, data, CBModel);\n}", "name": "createOne", "examples": ["class2.createOne({'class2Attribute2': 'some value (string)'});"], "annotation": ""}, {"body": "public static void createMany(JsonArray data) {\n    class createManyCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    createManyCB CBModel = new createManyCB();\n    Adapter.createMany(className, data, CBModel);\n}", "name": "createMany", "examples": ["class2.createMany([{'class2Attribute2': 'some value (string)'}, {'class2Attribute2': 'some other value (string)'}]);"], "annotation": ""}, {"body": "public static void readOne(JsonObject data) {\n    class readOneCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    readOneCB CBModel = new readOneCB();\n    Adapter.readOne(className, data, CBModel);\n}", "name": "readOne", "examples": ["class2.readOne({'_id': 'specific id (String)'});", "class2.readOne({'class2Attribute2': 'some value (string)'});"], "annotation": ""}, {"body": "public static void readMany(JsonObject data) {\n    class readManyCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    readManyCB CBModel = new readManyCB();\n    Adapter.readMany(className, data, CBModel);\n}", "name": "readMany", "examples": ["class2.readMany({'class2Attribute2': 'some value (string)'});"], "annotation": ""}, {"body": "public static void update(JsonObject searchData, JsonObject updateData) {\n    class updateCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    JsonObject data = new JsonObject();\n    data.add(\"oldData\",search);\n    data.add(\"newData\",update);\n    updateCB CBModel = new updateCB();\n    Adapter.update(className, data, CBModel);\n}", "name": "update", "examples": ["class2.update({'_id': 'specific id (String)'}(search data), {'class2Attribute2': 'some value (string)'}(update data));", "class2.update({'class2Attribute2': 'some value (string)'}(search data), {'class2Attribute2': 'some other value (string)'}(update data));"], "annotation": ""}, {"body": "public static void delete(JsonObject data) {\n    class deleteCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    deleteCB CBModel = new deleteCB();\n    Adapter.delete(className, data, CBModel);\n}", "name": "delete", "examples": ["class2.delete({'_id': 'specific id (String)'});", "class2.delete({'class2Attribute2': 'some value (string)'});"], "annotation": ""}]}}, "class3": {"Swift": {"file_uri": "./generated_code/qwer/Generalization/5b5f80291d41c8103b93ac5b/Swift//class3.swift", "attribute_list": [], "func_info_list": [{"body": "func createOne(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.createOne(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "createOne", "examples": [], "annotation": ""}, {"body": "func createMany(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.createMany(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "createMany", "examples": [], "annotation": ""}, {"body": "func readOne(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.readOne(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "readOne", "examples": [], "annotation": ""}, {"body": "func readMany(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.readMany(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "readMany", "examples": [], "annotation": ""}, {"body": "func update(search: JSON, update: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        let data = [\"oldData\": search, \"newData\": update]\n        adapter.update(tableName: collection, data: update, successCB: successCB, errorCB: errorCB)\n}", "name": "update", "examples": [], "annotation": ""}, {"body": "func delete(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.delete(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "delete", "examples": [], "annotation": ""}]}, "JavaScript": {"file_uri": "./generated_code/qwer/Generalization/5b5f80291d41c8103b93ac5b/JavaScript//class3.js", "attribute_list": [], "func_info_list": [{"body": "class3.createOne = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.createOne(class3.name, data, successCB, errorCB);\n};", "name": "createOne", "examples": [], "annotation": " just test\nlalala\n"}, {"body": "class3.createMany = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.createMany(class3.name, data, successCB, errorCB);\n};", "name": "createMany", "examples": [], "annotation": ""}, {"body": "class3.readOne = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.readOne(class3.name, data, successCB, errorCB);\n};", "name": "readOne", "examples": [], "annotation": ""}, {"body": "class3.readMany = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.readMany(class3.name, data, successCB, errorCB);\n};", "name": "readMany", "examples": [], "annotation": ""}, {"body": "class3.update = function(search, update, success, error) {\n    // Wrap data\n    var data = {\n        oldData : search,\n        newData : update\n    };\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.update(class3.name, data, successCB, errorCB);\n};", "name": "update", "examples": [], "annotation": ""}, {"body": "class3.delete = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.delete(class3.name, data, successCB, errorCB);\n};", "name": "delete", "examples": [], "annotation": ""}]}, "Java": {"file_uri": "./generated_code/qwer/Generalization/5b5f80291d41c8103b93ac5b/Java//class3.java", "attribute_list": [], "func_info_list": [{"body": "public static void createOne(JsonObject data) {\n    class createOneCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    createOneCB CBModel = new createOneCB();\n    Adapter.createOne(className, data, CBModel);\n}", "name": "createOne", "examples": [], "annotation": ""}, {"body": "public static void createMany(JsonArray data) {\n    class createManyCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    createManyCB CBModel = new createManyCB();\n    Adapter.createMany(className, data, CBModel);\n}", "name": "createMany", "examples": [], "annotation": ""}, {"body": "public static void readOne(JsonObject data) {\n    class readOneCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    readOneCB CBModel = new readOneCB();\n    Adapter.readOne(className, data, CBModel);\n}", "name": "readOne", "examples": [], "annotation": ""}, {"body": "public static void readMany(JsonObject data) {\n    class readManyCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    readManyCB CBModel = new readManyCB();\n    Adapter.readMany(className, data, CBModel);\n}", "name": "readMany", "examples": [], "annotation": ""}, {"body": "public static void update(JsonObject searchData, JsonObject updateData) {\n    class updateCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    JsonObject data = new JsonObject();\n    data.add(\"oldData\",search);\n    data.add(\"newData\",update);\n    updateCB CBModel = new updateCB();\n    Adapter.update(className, data, CBModel);\n}", "name": "update", "examples": [], "annotation": ""}, {"body": "public static void delete(JsonObject data) {\n    class deleteCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    deleteCB CBModel = new deleteCB();\n    Adapter.delete(className, data, CBModel);\n}", "name": "delete", "examples": [], "annotation": ""}]}}, "class1": {"Swift": {"file_uri": "./generated_code/qwer/Generalization/5b5f80291d41c8103b93ac5b/Swift//class1.swift", "attribute_list": [], "func_info_list": [{"body": "func createOne(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.createOne(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "createOne", "examples": ["class1.createOne({'class1Attribute1': 'some value (int)'})"], "annotation": ""}, {"body": "func createMany(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.createMany(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "createMany", "examples": ["class1.createMany([{'class1Attribute1': 'some value (int)'}, {'class1Attribute1': 'some other value (int)'}])"], "annotation": ""}, {"body": "func readOne(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.readOne(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "readOne", "examples": ["class1.readOne({'_id': 'specific id (String)'})", "class1.readOne({'class1Attribute1': 'some value (int)'})"], "annotation": ""}, {"body": "func readMany(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.readMany(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "readMany", "examples": ["class1.readMany({'class1Attribute1': 'some value (int)'})"], "annotation": ""}, {"body": "func update(search: JSON, update: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        let data = [\"oldData\": search, \"newData\": update]\n        adapter.update(tableName: collection, data: update, successCB: successCB, errorCB: errorCB)\n}", "name": "update", "examples": ["class1.update({'_id': 'specific id (String)'}(search data), {'class1Attribute1': 'some value (int)'}(update data))", "class1.update({'class1Attribute1': 'some value (int)'}(search data), {'class1Attribute1': 'some other value (int)'}(update data))"], "annotation": ""}, {"body": "func delete(data: JSON) {\n        func successCB(_ result: Any)-> Void {\n            print(result)\n        }\n        func errorCB(_ result:Any) -> Void {\n            print(result)\n        }\n        adapter.delete(tableName: tableName, data: data, successCB: successCB, errorCB: errorCB)\n}", "name": "delete", "examples": ["class1.delete({'_id': 'specific id (String)'})", "class1.delete({'class1Attribute1': 'some value (int)'})"], "annotation": ""}]}, "JavaScript": {"file_uri": "./generated_code/qwer/Generalization/5b5f80291d41c8103b93ac5b/JavaScript//class1.js", "attribute_list": [], "func_info_list": [{"body": "class1.createOne = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.createOne(class1.name, data, successCB, errorCB);\n};", "name": "createOne", "examples": ["class1.createOne({'class1Attribute1': 'some value (int)'}, success(function), error(function))"], "annotation": " just test\nlalala\n"}, {"body": "class1.createMany = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.createMany(class1.name, data, successCB, errorCB);\n};", "name": "createMany", "examples": ["class1.createMany([{'class1Attribute1': 'some value (int)'}, {'class1Attribute1': 'some other value (int)'}], success(function), error(function))"], "annotation": ""}, {"body": "class1.readOne = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.readOne(class1.name, data, successCB, errorCB);\n};", "name": "readOne", "examples": ["class1.readOne({'_id': 'specific id (String)'}, success(function), error(function))", "class1.readOne({'class1Attribute1': 'some value (int)'}, success(function), error(function))"], "annotation": ""}, {"body": "class1.readMany = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.readMany(class1.name, data, successCB, errorCB);\n};", "name": "readMany", "examples": ["class1.readMany({'class1Attribute1': 'some value (int)'}, success(function), error(function))"], "annotation": ""}, {"body": "class1.update = function(search, update, success, error) {\n    // Wrap data\n    var data = {\n        oldData : search,\n        newData : update\n    };\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.update(class1.name, data, successCB, errorCB);\n};", "name": "update", "examples": ["class1.update({'_id': 'specific id (String)'}(search data), {'class1Attribute1': 'some value (int)'}(update data), success(function), error(function))", "class1.update({'class1Attribute1': 'some value (int)'}(search data), {'class1Attribute1': 'some other value (int)'}(update data), success(function), error(function))"], "annotation": ""}, {"body": "class1.delete = function(data, success, error) {\n    // Wrap data\n\n    // Define callback function\n    function successCB(msg) {\n        // Success handling\n        success(msg);\n    }\n\n    function errorCB(msg) {\n        // Error handling\n        error(msg);\n    }\n\n    DBAdapter.delete(class1.name, data, successCB, errorCB);\n};", "name": "delete", "examples": ["class1.delete({'_id': 'specific id (String)'}, success(function), error(function))", "class1.delete({'class1Attribute1': 'some value (int)'}, success(function), error(function))"], "annotation": ""}]}, "Java": {"file_uri": "./generated_code/qwer/Generalization/5b5f80291d41c8103b93ac5b/Java//class1.java", "attribute_list": [], "func_info_list": [{"body": "public static void createOne(JsonObject data) {\n    class createOneCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    createOneCB CBModel = new createOneCB();\n    Adapter.createOne(className, data, CBModel);\n}", "name": "createOne", "examples": ["class1.createOne({'class1Attribute1': 'some value (int)'});"], "annotation": ""}, {"body": "public static void createMany(JsonArray data) {\n    class createManyCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    createManyCB CBModel = new createManyCB();\n    Adapter.createMany(className, data, CBModel);\n}", "name": "createMany", "examples": ["class1.createMany([{'class1Attribute1': 'some value (int)'}, {'class1Attribute1': 'some other value (int)'}]);"], "annotation": ""}, {"body": "public static void readOne(JsonObject data) {\n    class readOneCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    readOneCB CBModel = new readOneCB();\n    Adapter.readOne(className, data, CBModel);\n}", "name": "readOne", "examples": ["class1.readOne({'_id': 'specific id (String)'});", "class1.readOne({'class1Attribute1': 'some value (int)'});"], "annotation": ""}, {"body": "public static void readMany(JsonObject data) {\n    class readManyCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    readManyCB CBModel = new readManyCB();\n    Adapter.readMany(className, data, CBModel);\n}", "name": "readMany", "examples": ["class1.readMany({'class1Attribute1': 'some value (int)'});"], "annotation": ""}, {"body": "public static void update(JsonObject searchData, JsonObject updateData) {\n    class updateCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    JsonObject data = new JsonObject();\n    data.add(\"oldData\",search);\n    data.add(\"newData\",update);\n    updateCB CBModel = new updateCB();\n    Adapter.update(className, data, CBModel);\n}", "name": "update", "examples": ["class1.update({'_id': 'specific id (String)'}(search data), {'class1Attribute1': 'some value (int)'}(update data));", "class1.update({'class1Attribute1': 'some value (int)'}(search data), {'class1Attribute1': 'some other value (int)'}(update data));"], "annotation": ""}, {"body": "public static void delete(JsonObject data) {\n    class deleteCB {\n        public void successCB(String result) {\n            System.out.println(\"successCB: \" + result);\n        }\n        public void errorCB(String message) {\n            System.out.println(\"errorCB: \" + message);\n        }\n    }\n    deleteCB CBModel = new deleteCB();\n    Adapter.delete(className, data, CBModel);\n}", "name": "delete", "examples": ["class1.delete({'_id': 'specific id (String)'});", "class1.delete({'class1Attribute1': 'some value (int)'});"], "annotation": ""}]}}}, "server_url": "127.0.0.1:2000", "authen_key": "c3c9540f-f690-42f9-81b4-e981d160914d"}